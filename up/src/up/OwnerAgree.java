/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package up;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Nkosinathi
 */
public class OwnerAgree extends javax.swing.JFrame {

    /**
     * Creates new form OwnerAgree
     */
    public OwnerAgree() {
        initComponents();
    }
    
    private String driveLetter = "";
    
    public void GetDriveLetter(String driveLetter) {
        this.driveLetter = driveLetter;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        chkAgree = new javax.swing.JCheckBox();
        btnContinue = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblPlzFrnd = new javax.swing.JLabel();
        txtUSBFriendlyName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chkAgree.setText("I Agree");
        chkAgree.setToolTipText("");
        chkAgree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkAgreeStateChanged(evt);
            }
        });
        chkAgree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAgreeActionPerformed(evt);
            }
        });

        btnContinue.setBackground(new java.awt.Color(204, 204, 204));
        btnContinue.setText("Continue");
        btnContinue.setToolTipText("");
        btnContinue.setBorder(null);
        btnContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinueActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 204, 204));
        btnBack.setText("Back");
        btnBack.setToolTipText("");
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblPlzFrnd.setText("Please provide a friendly name you want to identify this USB with on the text box below:");

        txtUSBFriendlyName.setToolTipText("e.g: Black 32GB Sandisk");

        jLabel1.setText("Only Agree if you are the rightful owner of this device.");

        jLabel2.setText("USB Friendly name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(chkAgree)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtUSBFriendlyName))
                                .addComponent(lblPlzFrnd)))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnContinue, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addComponent(chkAgree)
                .addGap(18, 18, 18)
                .addComponent(lblPlzFrnd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUSBFriendlyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnContinue, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinueActionPerformed
        
        if (chkAgree.isSelected()) {
            
            if (txtUSBFriendlyName.getText().equals("")) {
                
                //Showing a warning message
                String msg = "Please enter some text on the USB Friendly name text box" ;

                JOptionPane.showMessageDialog(null, msg, "up", JOptionPane.INFORMATION_MESSAGE);
                
            }
            else {
                
                DBAccess db = new DBAccess();
                
                String userName = System.getProperty("user.name");
                 
                List<String> usbs = db.getUSBNames(userName);
                
                Boolean found = false;
                
                for (String usb : usbs) {
                    
                    if (txtUSBFriendlyName.getText().equals(usb)) {
                        found = true;
                        break;
                    }
                }
                
                if (found) {
                    String msg = "This USB friendly name has been alread used," +
                                  "\n" + "Please provide a different friendly name";

                    JOptionPane.showMessageDialog(null, msg, "up", JOptionPane.INFORMATION_MESSAGE);
                    
                } else {
                    
                    try {
           

                    String path = driveLetter + ":\\USBID.txt";
                    //Creating a USBID.txt file and storing it on the drive that has been read
                    PrintWriter pr = new PrintWriter(path);

                    //Writing a unique ID into the USBID.txt file
                    UUID uuid = UUID.randomUUID();
                    pr.write(uuid.toString());

                    pr.close();

                    //Using a batch command to hide the file
                    Process process = Runtime.getRuntime().exec("cmd.exe /C attrib +s +h "+ path);

                    this.hide();

                    //Insert into database

                    //Inserting a new USB
                    db.InsertNewUSB(uuid.toString(), userName, txtUSBFriendlyName.getText());

                    //Inserting a new Log

                    String ip = "";

                    InetAddress addr;
                    addr = InetAddress.getLocalHost();
                    String hostname = addr.getHostName();
                    ip = addr.toString();

                    db.InsertLog(uuid.toString(), ip, userName, "New USB registration");
                    
                    String labNo = hostname.substring(0, 4);
                    
                    try {
                        db.InsertComputer(ip, path);
                    } catch (Exception ec) {
                        
                    }
                    

                    //Showing a warning message
                    String msg = "A unique ID has been assigned to your USB"
                                  + "\nThank you for trusting up." ;

                    JOptionPane.showMessageDialog(null, msg, "up", JOptionPane.INFORMATION_MESSAGE);


                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(uniqueIDWarningForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(uniqueIDWarningForm.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
            
        }
        else {
            
            String msg = "You have to tick the Agree check box before you continue" ;

            JOptionPane.showMessageDialog(null, msg, "up", JOptionPane.INFORMATION_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnContinueActionPerformed

    private void chkAgreeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkAgreeStateChanged
        
    }//GEN-LAST:event_chkAgreeStateChanged

    private void chkAgreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAgreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkAgreeActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.hide();
        uniqueIDWarningForm un = new uniqueIDWarningForm();
        un.show();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OwnerAgree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OwnerAgree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OwnerAgree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OwnerAgree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OwnerAgree().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnContinue;
    private javax.swing.JCheckBox chkAgree;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblPlzFrnd;
    private javax.swing.JTextField txtUSBFriendlyName;
    // End of variables declaration//GEN-END:variables
}
